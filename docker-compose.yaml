services:
  mysql-order:
    image: mysql:8.3.0
    container_name: mysqlOrderDB
    environment:
      MYSQL_ROOT_PASSWORD: nick123
      MYSQL_DATABASE: order_service
    ports:
      - "3306:3306"
    volumes:
      - ./orders/mysql:/var/lib/mysql
    networks:
      - app-network

  mysql-manufacture:
    image: mysql:8.3.0
    container_name: mysqlManufactureDB
    environment:
      MYSQL_ROOT_PASSWORD: nick123
      MYSQL_DATABASE: manufacture_service
    ports:
      - "3307:3306"
    volumes:
      - ./manufacture/mysql:/var/lib/mysql
    networks:
      - app-network

  mysql-logistics:
    image: mysql:8.3.0
    container_name: mysqlLogisticsDB
    environment:
      MYSQL_ROOT_PASSWORD: nick123
      MYSQL_DATABASE: logistics_service
    ports:
      - "3308:3306"
    volumes:
      - ./logistics/mysql:/var/lib/mysql
    networks:
      - app-network

  mysql-sales:
    image: mysql:8.3.0
    container_name: mysqlSalesDB
    environment:
      MYSQL_ROOT_PASSWORD: nick123
      MYSQL_DATABASE: sales_service
    ports:
      - "3309:3306"
    volumes:
      - ./sales/mysql:/var/lib/mysql
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: Factory
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - app-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8095:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    networks:
      - app-network

  elasticsearch:
    image: elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - app-network

  kibana:
    image: kibana:8.15.0
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    networks:
      - app-network

  elastic-init:
    image: curlimages/curl:latest
    depends_on:
      - elasticsearch
    entrypoint: >
      sh -c "until nc -z elasticsearch 9200; do echo waiting for elasticsearch; sleep 2; done;
      sh /scripts/init-elasticsearch.sh"
    volumes:
      - ./scripts/init-elasticsearch.sh:/scripts/init-elasticsearch.sh
    networks:
      - app-network


networks:
  app-network:
    driver: bridge